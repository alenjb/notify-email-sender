name: Deploy to Docker Hub and NOTIFY Server

# 워크플로우 트리거 설정
on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 워크플로우 실행

jobs:
  deploy-ci:
    runs-on: ubuntu-22.04
    env:
      working-directory: notify-crawler

    steps: 
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: application.yaml 생성
      run: | 
          mkdir ./src/main/resources # resources 폴더 생성
          cd src/main/resources
          echo "${{ secrets.APPLICATION }}" > ./application.yml

    - name: 빌드
      run: |
          chmod +x gradlew
          ./gradlew build -x test
      shell: bash

    - name: Set up Docker Buildx  # Docker Buildx 설정
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub  # Docker Hub에 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}  # Docker Hub 사용자 이름
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}  # Docker Hub 접근 토큰

    - name: Build and Push Docker Image  # Docker 이미지 빌드 및 푸시
      uses: docker/build-push-action@v4
      with:
        context: .  # 현재 디렉토리를 컨텍스트로 사용
        file: ./Dockerfile  # Dockerfile 위치
        push: true  # 이미지를 Docker Hub에 푸시
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/notify-crawler:latest  # 이미지 태그 설정

  deploy:
    runs-on: ubuntu-latest  # 워크플로우가 실행될 환경 설정
    needs: deploy-ci  # deploy-ci 작업 완료 후 실행

    steps:
      - name: Deploy to NOTIFY Server  # 원격 서버에 배포
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.NOTIFY_SERVER_HOST }}  # 원격 서버 주소
          username: ${{ secrets.NOTIFY_SERVER_USER }}  # 원격 서버 사용자 이름
          key: ${{ secrets.NOTIFY_SERVER_SSH_KEY }}  # 원격 서버 SSH 키
          script: |  # 원격 서버에서 실행할 스크립트
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/notify-crawler:latest  # 최신 Docker 이미지 풀링
            sudo docker stop notify-crawler || true  # 기존 컨테이너 중지 (실패해도 무시)
            sudo docker rm notify-crawler || true  # 기존 컨테이너 삭제 (실패해도 무시)
            sudo docker run -d -p 8082:8082 --name notify-crawler --restart=always ${{ secrets.DOCKER_HUB_USERNAME }}/notify-crawler:latest  # 새 컨테이너 실행
